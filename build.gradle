plugins {
	id 'java'
	id 'jacoco'
	id 'checkstyle'
	id 'maven-publish'
	alias(libs.plugins.spotless)
	alias(libs.plugins.spring.boot)
	alias(libs.plugins.spring.boot.aot)
	// alias(libs.plugins.graalvm.native)
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
}

repositories {
	maven {
		url 'https://maven.aliyun.com/repository/public/'
	}
	maven {
		url 'https://maven.aliyun.com/repository/spring/'
	}
	maven {
		url 'https://maven.aliyun.com/repository/gradle-plugin'
	}
	mavenLocal()
	mavenCentral()
}

dependencies {
	implementation(platform(libs.spring.boot.dependencies))
	implementation(platform(libs.spring.cloud.dependencies))
	implementation libs.spring.cloud.starter
	implementation libs.spring.boot.autoconfigure.processor
	implementation libs.spring.boot.starter.actuator
	implementation libs.spring.boot.starter.data.jpa
	implementation libs.spring.boot.starter.data.redis
	implementation libs.spring.boot.starter.cache
	implementation libs.spring.boot.starter.validation
	implementation libs.spring.boot.starter.web
	implementation libs.spring.boot.starter.undertow
	implementation libs.jackson.datatype.jsr310
	//
	implementation libs.springdoc.openapi
	//
	implementation libs.micrometer.tracing
	implementation libs.micrometer.registry.prometheus
	// cache
	implementation libs.caffeine
	//
	implementation libs.guava
	implementation libs.mapstruct
	//
	implementation libs.flyway
	runtimeOnly libs.h2
	runtimeOnly libs.postgresql
	//
	compileOnly libs.lombok
	annotationProcessor libs.bundles.annotation.processor
	//
	testImplementation libs.bundles.testing
}

tasks.named('test') {
	useJUnitPlatform()
}

apply from: 'jacoco-build.gradle'

checkstyle {
	toolVersion = "10.20.0"
	configProperties = [
			"org.checkstyle.google.suppressionfilter.config":
					"${projectDir}/config/checkstyle/suppressions.xml",
	]
}

tasks.withType(Checkstyle) {
	dependsOn spotlessApply
	maxHeapSize = "1g"
	reports {
		xml.required = false
		html.required = true
		sarif.required = true
	}
}

publishing {
	publications {
		app(MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
			def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// Use the default importOrder configuration
		importOrderFile('spotless.importorder')
		removeUnusedImports()
		cleanthat()
		palantirJavaFormat()
		formatAnnotations()  // fixes formatting of type annotations, see below
		licenseHeader '/* (C) $YEAR */ \n\n' // or licenseHeaderFile
	}
}

springBoot {
	buildInfo()
}

tasks.named("bootBuildImage") {
	environment["BPE_DELIM_JAVA_TOOL_OPTIONS"] = " "
	environment["BPE_APPEND_JAVA_TOOL_OPTIONS"] = "-Dspring.aot.enabled=true"
}